---
title: "Chapter 6: Functions"
author: Leslie Emery
date: "2024-05-03"
format: html
---

## 6.1 Function fundamentals

**Functions are objects!** just like vectors

* Parts of a function:
1. Arguments (`formals()`) *explicit*
2. Code (`body()`) *explicit*
3. Environment (`environment()`) *implicit*
   * Depends on where you defined the function
* Functions can have `attributes`, just like any R object
* `srcref` is used by base R to point to the source code
  * Will contain comments and formatting, unlike `body()`
* **Primitive functions** call C code directly
* `typeof()` will be "builtin" or "special"
* Formals, body, and environment will all be `NULL`
* Only found in base
* R uses **[first-class functions](https://en.wikipedia.org/wiki/First-class_function)**
* Can pass functions as arguments to other functions
  * Harmonization helper function example
* Functions can return other functions
* Functions can be assigned to variables and stored in data structures
  * `daapr` join function example
* An **anonymous function** is not assigned to a name
* Functions are also called **closures** in R
* `object of type 'closure' is not subsettable` error
  * Jenny Bryan's excellent 2020 RStudio::conf() talk
  * trying to call `df$x` when you haven't defined a dataframe named x yet (`df` is the density function)
  * trying to use a reactive as an object instead of a function call in a Shiny app (e.g. `mydata$x` instead of `mydata()$x`
* To call a function when you already have the arguments in a list, use `do.call`: `myargs <- list(1:10, na.rm=T); do.call(mean, myargs)`

## 6.3 Function composition

Ways to call multiple functions in a chain:
1. Nesting
2. Intermediate objects
3. Piping

* Reasons to use each in different situations
* Piping might be a better fit in "data analysis code" and not a good fit for packages

## 6.4 Lexical scoping

* **Scoping** is the process of finding the value associated with a name
* **Lexical scoping** looks up value of a name based on how the function is defined, not how it's called (defined at "parse time")
* Compared to **dynamic scoping** (defined at "run time")
  * Mostly older languages, most notable are `bash`, `LaTeX`
* Scoping rules in R:
* Name masking: names inside a function mask those outside ("local scope" in Python)
* Functions vs. variables: in a function call, R prefers names of non-functions as arguments
* Fresh start: a new environment is created for every function call, an each is independent
* Dynamic lookup: look for values when the function is run, not when it is created
  * If you R function uses a non-local object, then that object may change in the meantime


## 6.5 Lazy evaluation

* A lot of things that make me think, *"Oh, that's weird"*
* Function arguments aren't evaluated until they are used
* This is enabled by the **promise**
1. Expression that does the delayed computation
2. Environment where the expression is evaluated (where function is called)
3. Value computed & cached at time of expression evaluation
* Default arguments can be defined in terms of other arguments, or even variables defined later in the function
* `missing()` to determine if a function arg is default or user-provided (interesting)
* Is Hadley going to give us another inscrutable operator??? `%||%`


## 6.6 ... (dot-dot-dot)

* `...` is a special function argument for variable number of arguments (**varargs**)
* similar to `*args` and `*kwargs` in python 
* Use it to pass on args to another function
* More *this is weird* stuff:
  * `..N` for elements within `...`
  * `list(...)`
* Major downside: misspelled args won't raise error
* Hadley also talks about it being "hard to understand", but I think this underestimates R users.


## 6.7 Exiting a function

* Exit a function with a **return** or an **error**
* Implicit return: last evaluated expression **My biggest R pet peeve!**
* Explicit return: `return(myvector)`
* Invisible return: `invisible(myvector)`
* For functions that are called for a side effect
* Error: `stop("my error message")` stops execution of the function
* `on.exit(add=TRUE)` for an **exit handler**
    * like a teardown procedure from tests
    * clean up the global state
    * `add=TRUE` means don't overwrite the exit handler on each call
    * You can put clean up code right by the code it cleans up after


## 6.8 Function forms

* Four forms of function calls:
1. Prefix: function name, then arguments
2. Infix: function between arguments (operators)
3. Replacement: replace values by assignment
4. Special: other weird things like `[[`, `if`, and `for`; these are all primitives
* But *all function calls can be written in prefix form!*
```
`+`(3, 5) # This actually works!
```
* Knowing the function name, you can overload built-in functions
* Function arguments can be partially matched (this sounds dangerous)
* *"arguments are matched by exact name, then with unique prefixes, and finally by position"*
* `options(warnPartialMatchArgs = TRUE)`
* You can create your own infix functions by starting/ending with `%`



## Quiz

1.  What are the three components of a function?

1.  What does the following code return?

    ```{r, eval = FALSE}
    x <- 10
    f1 <- function(x) {
      function() {
        x + 10
      }
    }
    f1(1)()
    ```
    
1.  How would you usually write this code?

    ```{r, eval = FALSE}
    `+`(1, `*`(2, 3))
    ```
    
1.  How could you make this call easier to read?

    ```{r, eval = FALSE}
    mean(, TRUE, x = c(1:10, NA))
    ```

1.  Does the following code throw an error when executed? Why or why not?

    ```{r, eval = FALSE}
    f2 <- function(a, b) {
      a * 10
    }
    f2(10, stop("This is an error!"))
    ```

1.  What is an infix function? How do you write it? What's a replacement 
    function? How do you write it?

1.  How do you ensure that cleanup action occurs regardless of how a function 
    exits?

## Exercises

### 6.2

1. Given a name, like `"mean"`, `match.fun()` lets you find a function. 
   Given a function, can you find its name? Why doesn't that make sense in R?

1.  It's possible (although typically not useful) to call an anonymous function.
    Which of the two approaches below is correct? Why?

    ```{r, result = "hide"}
    function(x) 3()
    (function(x) 3)()
    ```

1. A good rule of thumb is that an anonymous function should fit on one line 
   and shouldn't need to use `{}`. Review your code. Where could you have 
   used an anonymous function instead of a named function? Where should you 
   have used a named function instead of an anonymous function?

1.  What function allows you to tell if an object is a function? What function
    allows you to tell if a function is a primitive function?

1.  This code makes a list of all functions in the base package. 
    
    ```{r}
    objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
    funs <- Filter(is.function, objs)
    ```

    Use it to answer the following questions:

    a. Which base function has the most arguments?
    
    a. How many base functions have no arguments? What's special about those
       functions?
       
    a. How could you adapt the code to find all primitive functions?

1. What are the three important components of a function?

1. When does printing a function not show the environment it was created in?

### 6.4

1. What does the following code return? Why? Describe how each of the three
   `c`'s is interpreted.

    ```{r, eval = FALSE}
    c <- 10
    c(c = c)
    ```

1. What are the four principles that govern how R looks for values?

1. What does the following function return? Make a prediction before 
   running the code yourself.

    ```{r, results = "hide"}
    f <- function(x) {
      f <- function(x) {
        f <- function() {
          x ^ 2
        }
        f() + 1
      }
      f(x) * 2
    }
    f(10)
    ```


### 6.5

1.  What important property of `&&` makes `x_ok()` work?

    ```{r}
    x_ok <- function(x) {
      !is.null(x) && length(x) == 1 && x > 0
    }
    
    x_ok(NULL)
    x_ok(1)
    x_ok(1:3)
    ```

    What is different with this code? Why is this behaviour undesirable here?
    
    ```{r}
    x_ok <- function(x) {
      !is.null(x) & length(x) == 1 & x > 0
    }
    
    x_ok(NULL)
    x_ok(1)
    x_ok(1:3)
    ```
    
1.  What does this function return? Why? Which principle does it illustrate?

    ```{r, results = "hide"}
    f2 <- function(x = z) {
      z <- 100
      x
    }
    f2()
    ```

1.  What does this function return? Why? Which principle does it illustrate?
  
    ```{r, results = "hide"}
    y <- 10
    f1 <- function(x = {y <- 1; 2}, y = 0) {
      c(x, y)
    }
    f1()
    y
    ```
  
1.  In `hist()`, the default value of `xlim` is `range(breaks)`, the default 
    value for `breaks` is `"Sturges"`, and

    ```{r}
    range("Sturges")
    ```
    
    Explain how `hist()` works to get a correct `xlim` value.
    
1.  Explain why this function works. Why is it confusing?

    ```{r}
    show_time <- function(x = stop("Error!")) {
      stop <- function(...) Sys.time()
      print(x)
    }
    show_time()
    ```

1.  How many arguments are required when calling `library()`?

Wow, there is a lot more to `library` than I've ever thought about! `library(help="dplyr")` is really interesting. And it looks like calling it without any arguments at all is still valid. It just gives you a list of all available packages.


### 6.6

1.  Explain the following results:
    
    ```{r}
    sum(1, 2, 3)
    mean(1, 2, 3)
    
    sum(1, 2, 3, na.omit = TRUE)
    mean(1, 2, 3, na.omit = TRUE)
    ```

1.  Explain how to find the documentation for the named arguments in the 
    following function call:
    
    ```{r, fig.asp = 1, small_mar = TRUE, fig.width = 3}
    plot(1:10, col = "red", pch = 20, xlab = "x", col.lab = "blue")
    ```
    
1.  Why does `plot(1:10, col = "red")` only colour the points, not the axes 
    or labels? Read the source code of `plot.default()` to find out.

### 6.7

1.  What does `load()` return? Why don't you normally see these values?

1.  What does `write.table()` return? What would be more useful?

1.  How does the `chdir` parameter of `source()` compare to `with_dir()`? Why 
    might you prefer one to the other?

1.  Write a function that opens a graphics device, runs the supplied code, and 
    closes the graphics device (always, regardless of whether or not the 
    plotting code works).

1.  We can use `on.exit()` to implement a simple version of `capture.output()`.

    ```{r, eval = getRversion() >= "3.5"}
    capture.output2 <- function(code) {
      temp <- tempfile()
      on.exit(file.remove(temp), add = TRUE, after = TRUE)

      sink(temp)
      on.exit(sink(), add = TRUE, after = TRUE)

      force(code)
      readLines(temp)
    }
    capture.output2(cat("a", "b", "c", sep = "\n"))
    ```

    Compare `capture.output()` to `capture.output2()`. How do the functions 
    differ? What features have I removed to make the key ideas easier to see? 
    How have I rewritten the key ideas so they're easier to understand?
    
### 6.8

1. Rewrite the following code snippets into prefix form:

    ```{r, eval = FALSE}
    1 + 2 + 3
    
    1 + (2 + 3)
    
    if (length(x) <= 5) x[[5]] else x[[n]]
    ```

1.  Clarify the following list of odd function calls:

    ```{r, eval = FALSE}
    x <- sample(replace = TRUE, 20, x = c(1:10, NA))
    y <- runif(min = 0, max = 1, 20)
    cor(m = "k", y = y, u = "p", x = x)
    ```


1. Explain why the following code fails:

    ```{r, eval = FALSE}
    modify(get("x"), 1) <- 10
    #> Error: target of assignment expands to non-language object
    ```

1. Create a replacement function that modifies a random location in a vector.

1. Write your own version of `+` that pastes its inputs together if they are 
   character vectors but behaves as usual otherwise. In other words, make this 
   code work:
   
    ```{r, eval = FALSE}
    1 + 2
    #> [1] 3
    
    "a" + "b"
    #> [1] "ab"
    ```

1. Create a list of all the replacement functions found in the base package. 
   Which ones are primitive functions? (Hint: use `apropos()`.)

1. What are valid names for user-created infix functions?

1. Create an infix `xor()` operator.

1. Create infix versions of the set functions `intersect()`, `union()`, and
   `setdiff()`. You might call them `%n%`, `%u%`, and `%/%` to match 
   conventions from mathematics.


